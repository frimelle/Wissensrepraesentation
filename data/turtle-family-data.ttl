@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix wr: <http://github.com/frimelle/Wissensrepraesentation/>.
@prefix wrp: <http://github.com/frimelle/Wissensrepraesentation/person/>.
@prefix wrr: <http://github.com/frimelle/Wissensrepraesentation/relation/>.


### Metadata für die Datei, orientiert an die "Dublin Core Metadata Initiative"
@prefix dc:  <http://purl.org/dc/elements/1.1/>.

<http://www.dlib.org>
    dc:title "Der Erwählte" ;
    dc:creater [
      a rdf:Bag; #doppelte Einträge möglich, Reihenfolge unwichtig
      rdf:_1 "Lucie-Aimée Kaffee"
      rdf_2 "test"
    ] ;
    dc:description """Umsetzung des Prolog Programmes in RDF und SPARQL""" ;
    dc:date "2014-04-22" ;
    dc:subject [
         a rdf:Seq ; #doppelte Einträge möglich, Reihenfolge wichtig
         rdf:_1 "Der Erwählte" ;
         rdf:_2 "Familienbeziehungen" ;
         rdf:_3 "Inzest"
    ];
    dc:type "Test Daten" ;
    dc:format "text/html" ;
    dc:language "de" .

### dieser Teil nur als Beispiel für die Benutzung von Klassen
wr:person rdf:type rdfs:Class . #kann in turtle auch ersetzt werden durch: wr:person a rdfs:Class .
wr:personW a rdfs:Class ;
  rdfs:subClassOf   wr:person .
wr:personM a rdfs:Class ;
  rdfs:subClassOf   wr:person .



wrp:willigis a wr:personM ;
  #wr:geschlecht wr:maennlich ;
  wrr:bruderVon wrp:sibylla .

wrp:sibylla a wr:personW ;
  #wr:geschlecht wr:weiblich ;
  wrr:schwesterVon wrp:wiligis ;
  ### kinder als blank nodes ???
  wrr:kinder _:sk1.
_:sk1
  rdf:first wrp:grigorss ;
  rdf:rest _:sk2 .
_:sk2
  rdf:first wrp:herrad ;
  rdf:rest _:sk3 .
_:sk3
  rdf:first wrp:humilitas;
  rdf:rest rdf:nill .
  ### alternative zu dem wr:kinder _sk1 etc wäre einfach: (beides Darstellung von RDF Collections)
  #wrr:kinder (
  # wrp:grigorss
  # wrp:herrad
  # wrp:humilitas
  #) .

wrp:grigorss a wr:personM ;
  #wr:geschlecht wr:maennlich ;
  wrr:sohnVon wrp:sibylla ;
  wrr:sohnVon wrp:wiligis ;
  wrr:ehemannVon wrp:sibylla .

### mögliche Darstellungen der Verwandtschaftsverhältnisse von grigorss mit blank nodes
#wrp:grigorss wrr:beziehungen _:grigorossBez.
#_:grigorossBez
#  wrr:sohnVon wrp:sibylla ;
#  wrr:sohnVon wrp:wiligis ;
#  wrr:ehemannVon wrp:sibylla .

wrp:herrad a  wr:personW ;
  #wr:geschlecht weiblich .
  wrr:tochterVon wrp:sibylla ;
  wrr:tochterVon wrp:grigorss .

wrp:humilitas a wr:personW ;
  #wr:geschlecht wr:weiblich ;
  wrr:tochterVon wrp:sibylla ;
  wrr:tochterVon wrp:grigorss .

### einige Properties weiter definiert
wrr:mutterVon a rdfs:Property ; #nicht benutzt
  rdfs:range   wr:personW ;
  rdfs:range   wr:person ; #rdfs:range wr:person sollte durch die subClassOf unnötig sein
  rdfs:domain wr:person .

wrr:tochterVon rdf:type rdfs:Property ;
  rdfs:range wr:personW ;
  rdfs:domain wr:person . # während wir festlegen, dass die Tochter (das Subjekt) weiblich sein muss,
                          # ist das Objekt hiermit erstmal nur festgelegt als Person.

wrr:sohnVon rdf:type rdfs:Propery ;
  rdf:range wr:personM ;
  rdfs:domain wr:person .

wrr:bruderVon a rdfs:Property ;
    rdfs:domain wr:personM ;
    rdfs:range wr:person .

wrr:schwesterVon a rdfs:Property ;
  rdfs:domain wr:personW ;
  rdfs:range wr:person .
